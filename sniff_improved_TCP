#include <stdio.h>
#include <stdlib.h>
#include <pcap.h>
#include <arpa/inet.h>
#include <string.h>

/* Ethernet header */
struct ethheader {
    u_char ether_dhost[6]; /* destination MAC */
    u_char ether_shost[6]; /* source MAC */
    u_short ether_type;    /* protocol type */
};

/* IP Header */
struct ipheader {
    unsigned char iph_ihl:4, iph_ver:4; /* IP header length, version */
    unsigned char iph_tos;
    unsigned short int iph_len;  /* IP Packet length */
    unsigned short int iph_ident;
    unsigned short int iph_flag:3, iph_offset:13;
    unsigned char iph_ttl;
    unsigned char iph_protocol;
    unsigned short int iph_chksum;
    struct in_addr iph_sourceip;
    struct in_addr iph_destip;
};

/* TCP Header */
struct tcpheader {
    u_short tcp_sport; /* source port */
    u_short tcp_dport; /* destination port */
    u_int tcp_seq;
    u_int tcp_ack;
    u_char tcp_offx2;
#define TH_OFF(th) (((th)->tcp_offx2 & 0xf0) >> 4)
    u_char tcp_flags;
    u_short tcp_win;
    u_short tcp_sum;
    u_short tcp_urp;
};

void got_packet(u_char *args, const struct pcap_pkthdr *header, const u_char *packet) {
    struct ethheader *eth = (struct ethheader *)packet;

    // IP 패킷인지 확인 (0x0800 == IP)
    if (ntohs(eth->ether_type) == 0x0800) {
        struct ipheader *ip = (struct ipheader *)(packet + sizeof(struct ethheader));

        // TCP 패킷인지 확인
        if (ip->iph_protocol == IPPROTO_TCP) {
            struct tcpheader *tcp = (struct tcpheader *)(packet + sizeof(struct ethheader) + (ip->iph_ihl * 4));

            printf("\n=== Captured TCP Packet ===\n");
            
            // MAC 주소 출력
            printf("Ethernet Header:\n");
            printf("   Src MAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
                   eth->ether_shost[0], eth->ether_shost[1], eth->ether_shost[2],
                   eth->ether_shost[3], eth->ether_shost[4], eth->ether_shost[5]);
            printf("   Dst MAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
                   eth->ether_dhost[0], eth->ether_dhost[1], eth->ether_dhost[2],
                   eth->ether_dhost[3], eth->ether_dhost[4], eth->ether_dhost[5]);

            // IP 주소 출력
            printf("IP Header:\n");
            printf("   Src IP: %s\n", inet_ntoa(ip->iph_sourceip));
            printf("   Dst IP: %s\n", inet_ntoa(ip->iph_destip));

            // TCP 포트 출력
            printf("TCP Header:\n");
            printf("   Src Port: %d\n", ntohs(tcp->tcp_sport));
            printf("   Dst Port: %d\n", ntohs(tcp->tcp_dport));

            // 메시지 출력 (적당한 길이, 최대 32바이트)
            int ip_header_len = ip->iph_ihl * 4;
            int tcp_header_len = TH_OFF(tcp) * 4;
            int payload_offset = sizeof(struct ethheader) + ip_header_len + tcp_header_len;
            int payload_length = ntohs(ip->iph_len) - ip_header_len - tcp_header_len;

            printf("Message:\n   ");
            if (payload_length > 0) {
                int max_msg_length = payload_length > 32 ? 32 : payload_length;
                for (int i = 0; i < max_msg_length; i++) {
                    printf("%c", isprint(packet[payload_offset + i]) ? packet[payload_offset + i] : '.');
                }
                printf("%s\n", payload_length > 32 ? "..." : "");
            } else {
                printf("[No Payload]\n");
            }
        }
    }
}

int main() {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];
    struct bpf_program fp;
    char filter_exp[] = "tcp";
    bpf_u_int32 net;

    // 네트워크 인터페이스 설정
    handle = pcap_open_live("enp0s3", BUFSIZ, 1, 1000, errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Couldn't open device: %s\n", errbuf);
        return EXIT_FAILURE;
    }

    // 필터 적용 (TCP 패킷만 캡처)
    if (pcap_compile(handle, &fp, filter_exp, 0, net) == -1) {
        fprintf(stderr, "Couldn't parse filter %s\n", filter_exp);
        return EXIT_FAILURE;
    }
    if (pcap_setfilter(handle, &fp) == -1) {
        fprintf(stderr, "Couldn't install filter %s\n", filter_exp);
        return EXIT_FAILURE;
    }

    // 패킷 캡처 시작
    pcap_loop(handle, -1, got_packet, NULL);

    pcap_close(handle);
    return EXIT_SUCCESS;
}
